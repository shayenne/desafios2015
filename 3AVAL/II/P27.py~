lvr = [0 for i in xrange 205]

def dfsBigPath(g, v, ini):
    global lvr
    maxv = -1
    
    if v != ini and len(g[v]) <= 1:
        return 0

    lvr[v] = 1

    for w in g[v]:
        if lvr[w] == 0:
            maxw = dfsBigPath(g, w, ini)
            if maxw != -1 and maxv < 1 + maxw:
                maxv = 1 + maxw

    lvr[v] = 0
    return maxv
"""
    maior = 1
    if len(g[v]) > 0:
        for w in g[v]:
            tam = 0
            tam = 1 + rBigPath(w, g)
            qtd.append(tam)
    
    return maior
"""

livres = []

def verticesLivres(g, v, ini):
    global livres
    if v != ini and len(g[v]) <= 1:
        livres.append(v)
        return

    lvr[v] = 1
    for w in g[v]:
        if lvr[w] == 0:
            verticesLivres(w, ini)

    lvr[v] = 0




def bigPath(g, v):
    global view, lvr, livres
    for x in g:
        lvr[x] = 0

    big = 0
    livres = []
    verticesLivres(g, v, v)

    for l in livres:
        
        for x in g:
            lvr[x] = 0
        path = dfsBigPath(g, l, l)
        if path > big:
            big = path


    return big
"""
    big = 0
    view.append(v)
    if len(g[v]) > 0:
        for w in g[v]:

            if w not in view:
                view.append(w)
                print view
                tam = 1 + bigPath(g, w)
                print "tam", tam
                if tam > big:
                    big = tam
    print "big", big
    return big
"""    


n = int(raw_input())

graph = {}

for i in xrange(n-1):
    a, b = map(int, raw_input().split())

    if a not in graph:
        graph[a] = set()
    if b not in graph:
        graph[b] = set()

    graph[a].add(b)
    graph[b].add(a)

visto = []
maior = 0
for v in graph:
    for w in graph[v]:
        if (v, w) not in visto or (w, v) not in visto:
            graph[v].remove(w)
            graph[w].remove(v)
            visto.append((v, w))
            view = []
            v1 = bigPath(graph, v)
            view = []
            v2 =  bigPath(graph, w)
            if v1*v2 > maior:
                maior = v1*v2

            graph[v].add(w)
            graph[w].add(v)
            


print maior
            
